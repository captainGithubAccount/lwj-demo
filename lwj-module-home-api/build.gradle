apply from: '../config.gradle'

apply plugin: 'com.android.library'
//不能独立运行

apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-parcelize'

apply plugin: 'kotlin-kapt'
//kotlin语言使用注入框架，databading都要用这个
apply plugin: "androidx.navigation.safeargs.kotlin"


//用于navigation传参的时候的一种保护,注意这个插件要配置依赖才可以使用
apply plugin: 'kotlin-android'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
android {

    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion

    defaultConfig {
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName

        testInstrumentationRunner androidId.testInstrumentationRunner
        consumerProguardFiles androidId.consumerProguardFiles


    }

    dataBinding{
        enabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    depsCommon.each{k,v -> print("\t依赖有k is:" + k + "v is:" + v + "\t" )}
    depsCommon.each{k,v -> api v}
    //注意这里一定要用api,而不是用implementation 否则依附common的module只能访问到common的基类，但是基类用到的依赖无法使用



    //okhttp
    //okhttp logging-interceptor

    //gson

    //retrofit
    //retrofit converter-gson

    //utilcodex
}



